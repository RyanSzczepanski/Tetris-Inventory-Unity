// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
RWTexture2D<float4> Result;

int2 textureSize;

uint _cellSize;
uint _outlineSize;
uint _paddingSize;

float4 _cellColor;
float4 _cellAccentColor;

float4 _cellOutlineColor;
float4 _cellOutlineAccentColor;

float4 _outlineColor;
float4 _outlineAccentColor;

bool isAccentColor(uint2 pos) { return (pos.x + pos.y % 2) % 2 == 0; }

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint x = id.x;
    uint y = id.y;

    //Outline of entire sub inventory
    if (
    x < _outlineSize ||
    y < _outlineSize ||
    x > textureSize.x - _outlineSize - 1 ||
    y > textureSize.y - _outlineSize - 1)
    {
        //Breaks up solid colors
        Result[id.xy] = isAccentColor(id.xy) ? _outlineAccentColor : _outlineColor;
    }
    //CellOutlinePadding (Keeps an even outline width on outside cell blocks)
    else if (
    x < _paddingSize + _outlineSize ||
    y < _paddingSize + _outlineSize ||
    x > textureSize.x - (_paddingSize + _outlineSize) ||
    y > textureSize.y - (_paddingSize + _outlineSize))
    {
        //Breaks up solid colors
        Result[id.xy] = isAccentColor(id.xy) ? _cellOutlineAccentColor : _cellOutlineColor;
    }
    //CellOutline
    else if (
    (x - (_paddingSize + _outlineSize)) % _cellSize == 0 ||
    (y - (_paddingSize + _outlineSize)) % _cellSize == 0 ||
    (x - (_paddingSize + _outlineSize)) % _cellSize == _cellSize - 1 ||
    (y - (_paddingSize + _outlineSize)) % _cellSize == _cellSize - 1)
    {
        //Breaks up solid colors
        Result[id.xy] = isAccentColor(id.xy) ? _cellOutlineAccentColor : _cellOutlineColor;
    }
    //Fill
    else
    {
        //Breaks up solid colors
        Result[id.xy] = isAccentColor(id.xy) ? _cellAccentColor : _cellColor;
    }
}